<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:repository="http://www.springframework.org/schema/data/repository"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:redis="http://www.springframework.org/schema/redis"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
    http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
    http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository-1.5.xsd
    http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.5.xsd
    http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd">

	<!-- Root Context: defines shared resources visible to all other web components-->
	<context:component-scan base-package="com.shopping.base.dao" />
	<context:component-scan base-package="com.shopping.base.service" />
	<context:component-scan base-package="com.shopping.base.web" />
	<context:component-scan base-package="com.shopping.base.timer" />
	<context:component-scan base-package="com.shopping.base.util" />
	<context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"   />
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"  />
	<context:property-placeholder location="classpath:memcache.properties" ignore-unresolvable="true"  />
	<context:property-placeholder location="classpath:mongo.properties" ignore-unresolvable="true"  />
	<context:property-placeholder location="classpath:kaptcha.properties" ignore-unresolvable="true"  />
	
	
	<task:executor id="executor" pool-size="5" />
	<task:scheduler id="scheduler" pool-size="10" />
	<task:annotation-driven executor="executor" scheduler="scheduler" />
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
	    <property name="slowSqlMillis" value="10000" />
	    <property name="logSlowSql" value="true" />
	    <property name="mergeSql" value="true" />
	</bean>
	<!-- <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
	</bean> -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
	    <property name="resultSetLogEnabled" value="false" />
	</bean>
	<!-- 定义数据源Bean -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}" />
		<!-- <property name="filters" value="stat,log4j,wall" /> -->
		<property name="maxActive" value="1000"/>
		<property name="initialSize" value="1"/>
		<property name="maxWait" value="60000"/>
		<property name="minIdle" value="1"/>
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<property name="minEvictableIdleTimeMillis" value="300000"/>
		<property name="validationQuery" value="SELECT 'x'"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<property name="poolPreparedStatements" value="true"/>
		<property name="maxOpenPreparedStatements" value="20"/>
		<property name="proxyFilters">
	        <list>
	            <ref bean="stat-filter" />
	            <!-- <ref bean="wall-filter"/> -->
	            <ref bean="log-filter"/>
	        </list>
	    </property>
	</bean>
	
<!-- 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.shopping.base.dao.UserMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean> -->
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.shopping.base.entity" />
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.shopping.base.mybatis" />
    </bean>
	
	 <!-- This will ensure that Hibernate or JPA exceptions are automatically   
        translated into Spring's generic DataAccessException hierarchy for those   
        classes annotated with Repository. For example, see ***DAOImpl. -->  
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    
	 <!-- JPA实体管理工厂的配置 -->  
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">   
        <property name="dataSource" ref="dataSource"/>  
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>  
        <property name="packagesToScan" value="com.shopping.base.entity"/><!--待扫描的实体类包，不再需要persistence.xml了-->  
        <property name="jpaProperties">  
            <props>  
                <prop key="hibernate.max_fetch_depth">2</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.use_sql_comments">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!-- <prop key="hibernate.search.indexing_strategy">manual</prop> -->
				<prop key="hibernate.search.default.directory_provider">filesystem</prop>
				<prop key="hibernate.search.lucene_version">LUCENE_47</prop>
				<prop key="hibernate.search.default.indexBase">/shopping/indexes</prop>

			</props>  
        </property>  
    </bean>
 	<jpa:repositories base-package="com.shopping.base.dao" entity-manager-factory-ref="entityManagerFactory" 
 		transaction-manager-ref="transactionManager" />
    <!--指定实现JPA的适配器-->  
    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">  
        <property name="databasePlatform" value="${jdbc.platform}" />  
    </bean>  
      
    <!-- Jpa 事务配置 -->  
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
        <property name="entityManagerFactory" ref="entityManagerFactory"/>  
    </bean>  
    <!-- Spring Data Jpa配置 -->  
   <!-- JDBC配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- JDBC配置 -->
	<bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
    <!-- 使用annotation定义事务 -->  
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />  
	
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">${kaptcha.border}</prop>
						<prop key="kaptcha.border.color">${kaptcha.border.color}</prop>
						<prop key="kaptcha.textproducer.font.color">${kaptcha.textproducer.font.color}</prop>
						<prop key="kaptcha.image.width">${kaptcha.image.width}</prop>
						<prop key="kaptcha.image.height">${kaptcha.image.height}</prop>
						<prop key="kaptcha.textproducer.font.size">${kaptcha.textproducer.font.size}</prop>
						<prop key="kaptcha.session.key">${kaptcha.session.key}</prop>
						<prop key="kaptcha.textproducer.char.length">${kaptcha.textproducer.char.length}</prop>
						<prop key="kaptcha.textproducer.font.names">${kaptcha.textproducer.font.names}</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	<bean id="springUtils" class="com.shopping.core.util.SpringUtils" />
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"/>

</beans>